import shutil
import json
import subprocess
import typer
from pathlib import Path
import importlib.metadata
import importlib.resources
import os
from schorle.registry import registry

__version__ = importlib.metadata.version("schorle")
templates_path = importlib.resources.files("schorle").joinpath("templates")


app = typer.Typer(
    name="slx",
    help="Schorle is a framework for building powerful data-driven applications.",
)


@app.command(name="version", help="Show the version of the schorle CLI")
def version():
    typer.echo(f"Schorle version {__version__}")


@app.command(name="init", help="Initialize a new project")
def init(
    project_name: str = typer.Argument(..., help="The name of the project"),
    project_path: Path = typer.Argument(..., help="The path to the project"),
):
    typer.echo(f"Generating project {project_name} at {project_path}")

    if project_path.exists():
        typer.echo(f"Project path {project_path} already exists")
        raise typer.Exit(code=1)

    project_path.mkdir(parents=True, exist_ok=True)
    schorle_path = project_path / ".schorle"
    schorle_path.mkdir(parents=True, exist_ok=True)

    # run bun init in project_path
    subprocess.run(
        [
            "bun",
            "create",
            "next-app",
            "schorle",
            "--use-bun",
            "--typescript",
            "--tailwind",
            "--yes",
        ],
        cwd=project_path,
    )

    os.rename(project_path / "schorle", schorle_path)

    # put project_name into .schorle/package.json
    package_json = schorle_path / "package.json"
    content = json.loads(package_json.read_text())
    content["name"] = project_name
    package_json.write_text(json.dumps(content, indent=2))

    # copy ../templates/.schorle/**/* to schorle_path
    shutil.copytree(
        templates_path / ".schorle",
        schorle_path,
        dirs_exist_ok=True,
    )

    # remove .schorle/public folder
    shutil.rmtree(schorle_path / "public")

    # copy templates/app to project_path/app
    shutil.copytree(
        templates_path / "app",
        project_path / "app",
        dirs_exist_ok=True,
    )

    first_letter = project_name[0].upper()
    logo_template = project_path / "app" / "public" / "logo.template.svg"
    logo_template.write_text(
        logo_template.read_text().replace("{{project_first_letter}}", first_letter)
    )
    shutil.copy(
        logo_template,
        project_path / "app" / "public" / "logo.svg",
    )

    logo_template.unlink()

    # remove default page.tsx
    (schorle_path / "app" / "page.tsx").unlink()

    # copy ../templates/tsconfig.json to project_path/tsconfig.json
    shutil.copy(
        templates_path / "tsconfig.json",
        project_path / "tsconfig.json",
    )

    # add shadcn
    subprocess.run(
        ["bunx", "--bun", "shadcn@latest", "init", "--yes", "-b", "neutral"],
        cwd=schorle_path,
    )
    # add next-themes
    subprocess.run(["bun", "add", "next-themes", "@msgpack/msgpack"], cwd=schorle_path)

    # add button
    subprocess.run(
        ["bunx", "--bun", "shadcn@latest", "add", "button"], cwd=schorle_path
    )

    # add
    # this -> @source "../../app/pages/";
    # after -> @import "tw-animate-css";
    # to file schorle_path/app/styles/globals.css
    styles_file = schorle_path / "app" / "globals.css"
    content = styles_file.read_text()
    content = content.replace(
        '@import "tw-animate-css";',
        "\n".join(
            [
                '@import "tw-animate-css";',
                '@source "../../app/";',
            ]
        ),
    )
    styles_file.write_text(content)

    # add symlink from schorle_path/node_modules to project_path/node_modules

    (project_path / "node_modules").symlink_to(
        Path(".schorle/node_modules"), target_is_directory=True
    )

    # gen pages
    registry(
        pages=project_path / "app" / "pages",
        ts_out=schorle_path / "app" / "registry.gen.tsx",
        py_out=project_path / "registry.py",
        import_prefix="@/pages",
    )

    # add __init__.py to project_path
    (project_path / "__init__.py").write_text(
        "\n".join(
            [
                "# This file is generated by schorle init",
                "from .registry import pages",
                "from schorle.app import Schorle",
                "from pathlib import Path",
                "ui = Schorle(Path(__file__).parent)",
            ]
        )
    )


app.command(
    name="registry",
    help="Scan a /pages tree and emit a TypeScript lazy-import registry.",
)(registry)
